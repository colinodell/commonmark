<?php

/*
 * This file is part of the league/commonmark package.
 *
 * (c) Colin O'Dell <colinodell@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace League\CommonMark\Tests\Unit\Extension\HeadingPermalink\SlugGenerator;

use League\CommonMark\Block\Element\Document;
use League\CommonMark\Block\Element\Paragraph;
use League\CommonMark\Extension\HeadingPermalink\SlugGenerator\DefaultSlugGenerator;
use League\CommonMark\Inline\Element\HtmlInline;
use League\CommonMark\Inline\Element\Strong;
use League\CommonMark\Inline\Element\Text;
use PHPUnit\Framework\TestCase;

final class DefaultSlugGeneratorTest extends TestCase
{
    public function testGenerateSlug(): void
    {
        $document = new Document();
        $document->appendChild($paragraph = new Paragraph());
        $paragraph->appendChild($strong = new Strong());
        $strong->appendChild(new Text('Hello'));
        $paragraph->appendChild(new Text(' World!'));

        $slugGenerator = new DefaultSlugGenerator();

        $this->assertSame('hello-world', $slugGenerator->generateSlug($document));
        $this->assertSame('hello-world', $slugGenerator->generateSlug($paragraph));
    }

    public function testGenerateSlugWithNoInnerTextContents(): void
    {
        $paragraph = new Paragraph();

        $slugGenerator = new DefaultSlugGenerator();

        $this->assertSame('', $slugGenerator->generateSlug($paragraph));
    }

    public function testGenerateSlugWithHtmlInContents(): void
    {
        $document = new Document();
        $document->appendChild($paragraph = new Paragraph());
        $paragraph->appendChild(new Text('I'));
        $paragraph->appendChild(new Text(' '));
        $paragraph->appendChild($html = new HtmlInline());
        $html->setContent('<strong>love</strong>');
        $paragraph->appendChild(new Text(' '));
        $paragraph->appendChild(new Text('CommonMark!'));

        $slugGenerator = new DefaultSlugGenerator();

        $this->assertSame('i-commonmark', $slugGenerator->generateSlug($document));
        $this->assertSame('i-commonmark', $slugGenerator->generateSlug($paragraph));
        $this->assertSame('', $slugGenerator->generateSlug($html));
    }

    /**
     * @dataProvider dataProviderForTestSlugifyText
     */
    public function testSlugifyText(string $input, string $expectedOutput): void
    {
        $this->assertEquals($expectedOutput, DefaultSlugGenerator::slugifyText($input));
    }

    public function dataProviderForTestSlugifyText(): iterable
    {
        yield ['', ''];
        yield ['hello world', 'hello-world'];
        yield ['hello     world', 'hello-world'];
        yield ['Hello World!', 'hello-world'];

        yield ['456*(&^3484389462342#$#$#$#$', '4563484389462342'];
        yield ['me&you', 'meyou'];
        yield ['special char ·Ωê here', 'special-char-·Ωê-here'];
        yield ['–ø—Ä–∏—Å—Ç–∞–Ω—è–º —Å—Ç—Ä–µ–º—è—Ç—Å—è', '–ø—Ä–∏—Å—Ç–∞–Ω—è–º-—Å—Ç—Ä–µ–º—è—Ç—Å—è'];
        yield ['emoji üòÇ example', 'emoji--example'];
        yield ['One ¬Ω half', 'one--half'];
        yield ['Roman ‚ÜÅ example', 'roman-‚ÜÅ-example'];
        yield ['Here\'s a «Ñ digraph', 'heres-a-«Ü-digraph'];
        yield ['Unicode x¬≤ superscript', 'unicode-x-superscript'];
        yield ['Equal = sign', 'equal--sign'];
        yield ['Tabs	in	here', 'tabs-in-here'];
        yield ['Tabs-	-in-	-here-too', 'tabs---in---here-too'];
        yield ['We-love---dashes even with -lots- of    spaces', 'we-love---dashes-even-with--lots--of-spaces'];
        yield ['LOUD NOISES', 'loud-noises'];
        yield ['≈§ƒò≈ú≈¶', '≈•ƒô≈ù≈ß'];

        yield ["\nWho\nput\n\n newlines  \nin here?!\n", 'who-put-newlines-in-here'];

        yield ['‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è ‡∂∂‡∂Ω‡∂± ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä',    '‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è-‡∂∂‡∂Ω‡∂±-‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä'];
        yield ['‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è ‡∂∂‡∂Ω‡∂± ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä -',  '‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è-‡∂∂‡∂Ω‡∂±-‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä--'];
        yield ['‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è ‡∂∂‡∂Ω‡∂± ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä - ', '‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è-‡∂∂‡∂Ω‡∂±-‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä--'];
        yield ['‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è ‡∂∂‡∂Ω‡∂± ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä - ‡∂Ö', '‡∂Ö‡∂≠‡∑ä‡∑Ñ‡∂Ø‡∑è-‡∂∂‡∂Ω‡∂±-‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä---‡∂Ö'];

        yield ['ÊµãËØïÊ†áÈ¢ò',     'ÊµãËØïÊ†áÈ¢ò'];
        yield ['ÊµãËØï # Ê†áÈ¢ò',  'ÊµãËØï--Ê†áÈ¢ò'];
        yield ['ÊµãËØï x¬≤ Ê†áÈ¢ò', 'ÊµãËØï-x-Ê†áÈ¢ò'];
        yield ['Ë©¶È®ì„Çø„Ç§„Éà„É´', 'Ë©¶È®ì„Çø„Ç§„Éà„É´'];
    }
}
